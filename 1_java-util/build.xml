<project xmlns:jacoco="antlib:org.jacoco.ant" name="java2.util2" default="compile" basedir=".">


  <property name="max.heap"                value="8g"/>
  <!-- The directories for compilation targets -->
  <property name="build.home"              value="build"/>
  <property name="build.classes"           value="${build.home}/classes"/>
  <property name="build.jacoco.instr"      value="${build.home}/jacoco-instrument"/>
  <property name="build.jacoco.instr.be"   value="${build.home}/jacoco-instrument-be"/>
  <property name="build.tests"             value="${build.home}/tests"/>
  <property name="build.evosuite"          value="${build.home}/evosuite"/>
  <property name="build.randoop"           value="${build.home}/randoop"/>
  <property name="build.be"                value="${build.home}/be"/>
	  <property name="build.beapi"                value="${build.home}/beapi"/>

  <!-- Javac -->
  <property name="compile.debug"           value="true"/>
  <property name="compile.deprecation"     value="true"/>
  <property name="compile.optimize"        value="false"/>
  <property name="compile.source"          value="1.7"/>
  <property name="compile.target"          value="1.7"/>
  <property name="compile.encoding"        value="iso-8859-1"/>
  
	
  <!-- The base directories for sources -->
  <property name="source.java"             value="src/main/java"/>
  <property name="test.java"               value="src/test/java"/>
  <property name="source.resources"        value="src/main/resources"/>
  <property name="test.resources"          value="src/test/resources"/>
  <property name="test.report.dir"         value="${build.home}/test-report"/>
  <property name="evosuite.java"           value="evosuite-tests"/>
  <property name="randoop.java"            value="randoop-tests"/>
  <property name="be.java"                 value="be-tests"/>
  	<property name="beapi.java"                 value="beapi-tests"/>


  <property name="lib.dir"                 value="../lib/"/>

  <path id="jacoco.lib">
      <pathelement location="${lib.dir}/jacocoant.jar" />
      <pathelement location="${lib.dir}/jacocoagent.jar" />
      <pathelement location="${lib.dir}/jacocoreport.jar" />
  </path>  

  <path id="pitest.lib">
      <pathelement location="${lib.dir}/pitest-1.5.2.jar" />
      <pathelement location="${lib.dir}/pitest-entry-1.5.2.jar" />
      <pathelement location="${lib.dir}/pitest-ant-1.5.2.jar" />
      <pathelement location="${lib.dir}/junit-4.12.jar" />
      <pathelement location="${lib.dir}/hamcrest-core-1.3.jar" />
  </path>
  <path id="pitest.evosuite.lib">
      <pathelement location="${lib.dir}/pitest-1.5.2.jar" />
      <pathelement location="${lib.dir}/pitest-entry-1.5.2.jar" />
      <pathelement location="${lib.dir}/pitest-ant-1.5.2.jar" />
      <pathelement location="${lib.dir}/junit-4.12.jar" />
      <pathelement location="${lib.dir}/hamcrest-core-1.3.jar" />
      <pathelement location="${lib.dir}/evosuite-1.0.6.jar" />
  </path>
  <property name="pitest.classes" value="${ant.project.name}.*"/>
  <property name="pitest.threads" value="4"/>

  <!--  Import JaCoCo Ant tasks  -->
  <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
      <classpath refid="jacoco.lib" />
  </taskdef>
  <property name="jacoco.dir" location="${build.home}/jacoco"/>
  <property name="jacoco.report.dir" location="${jacoco.dir}/site/jacoco"/>
  <property name="jacoco.exec.file" location="${jacoco.dir}/jacoco.exec"/>

  <taskdef name="pitest" classname="org.pitest.ant.PitestTask" classpathref="pitest.lib" />

  <!-- The dependency libraries -->
  <path id="source.lib">
      <fileset dir="lib">
         <include name="**/*.jar"/>
      </fileset>
  </path>

  <!-- The dependency libraries for running/compiling tests -->
  <path id="test.lib">
      <fileset dir="test-lib">
         <include name="**/*.jar"/>
      </fileset>
      <pathelement location="${lib.dir}/junit-4.12.jar" />
      <pathelement location="${lib.dir}/hamcrest-core-1.3.jar" />
  </path>

  <path id="evosuite.lib">
      <pathelement location="${lib.dir}/evosuite-1.0.6.jar" />
  </path>  

  <path id="randoop.lib">
      <pathelement location="${lib.dir}/randoop-all-4.2.4.jar" />
  </path>  

  <path id="be.lib">
      <pathelement location="${lib.dir}/be.jar" />
  </path>  



<!-- ====================================================================== -->
<!-- ========== Executable Targets ======================================== -->
<!-- ====================================================================== -->

  <target name="clean"
          description="Clean build and distribution directories">
    <delete dir="${build.home}"/>
  </target>

  <target name="clean-auto-tests"
          description="Clean automatically generated tests">
    <delete dir="${be.java}"/>
    <delete dir="${randoop.java}"/>
    <delete dir="${evosuite.java}"/>
  </target>

<!-- ====================================================================== -->

  <target name="prepare"
          description="Prepare build directory">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${source.java}"/>
    <mkdir dir="${source.resources}"/>
    <mkdir dir="${test.java}"/>
    <mkdir dir="${test.resources}"/>
    <mkdir dir="${test.report.dir}"/>
    <mkdir dir="lib"/>
    <mkdir dir="test-lib"/>
  </target>

<!-- ====================================================================== -->

  <target name="compile" depends="prepare"
          description="Compile main code">
    <mkdir dir="${build.classes}"/>
    <javac  srcdir="${source.java}"
           destdir="${build.classes}"
            source="${compile.source}"
            target="${compile.target}"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}"
          encoding="${compile.encoding}"
       includeantruntime="false">
          <classpath refid="source.lib" />
    </javac>
    <copy todir="${build.classes}">
        <fileset dir="${source.java}" excludes="**/*.java"/>
        <fileset dir="${source.resources}" includes="**"/>
    </copy>
  </target>

  <target name="jacoco-instrument" depends="compile">
    <!--  Step 2: Instrument class files  -->
    <jacoco:instrument destdir="${build.jacoco.instr}">
      <fileset dir="${build.classes}"/>
    </jacoco:instrument>
  </target>

<!-- ====================================================================== -->
  
  <target name="compile-tests" depends="compile"
          description="Compile user provided tests">
    <mkdir dir="${build.tests}"/>
    <javac  srcdir="${test.java}"
           destdir="${build.tests}"
             debug="${compile.debug}"
            source="${compile.source}"
            target="${compile.target}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}"
          encoding="${compile.encoding}">
          <classpath>
            <path refid="source.lib" />
            <path refid="test.lib" />
            <pathelement path="${build.classes}"/>
          </classpath>
    </javac>
    <copy todir="${build.tests}">
        <fileset dir="${test.java}" excludes="**/*.java"/>
        <fileset dir="${test.resources}"/>
    </copy>
  </target>
  
<!-- ====================================================================== -->
  
  <target name="compile-evosuite" depends="compile"
          description="Compile EvoSuite generated tests">
    <mkdir dir="${build.evosuite}"/>
    <javac  srcdir="${evosuite.java}"
           destdir="${build.evosuite}"
            source="${compile.source}"
            target="${compile.target}"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}"
       includeantruntime="false">
          <classpath>
            <path refid="source.lib" />
            <path refid="test.lib" />
            <path refid="evosuite.lib" />
            <pathelement path="${build.classes}"/>
          </classpath>
    </javac>
  </target>

  <target name="evosuite-test" depends="compile-evosuite"
          description="Run EvoSuite generated tests">
     <junit printsummary="yes" haltonfailure="no" fork="yes"
          showoutput="yes" >
        <formatter type="brief" usefile="true" />
        <classpath>
           <pathelement path="${build.classes}"/>
           <pathelement path="${build.evosuite}"/>
           <path refid="source.lib" />
           <path refid="test.lib" />
           <path refid="evosuite.lib" />
        </classpath>
        <batchtest fork="yes" todir="${test.report.dir}">
           <fileset dir="${evosuite.java}">
             <exclude name="**/*scaffolding.java"/>
             <include name="**/*.java"/>
           </fileset>
        </batchtest>
     </junit>
  </target> 

  <target name="evosuite-measure-coverage" depends="compile,jacoco-instrument,compile-evosuite"
          description="Run Evosuite generated tests and measure coverage">
     <junit printsummary="yes" haltonfailure="no" fork="yes"
          showoutput="yes">
        <formatter type="brief" usefile="false" />
        <sysproperty key="jacoco-agent.destfile" file="${jacoco.exec.file}"/>
        <classpath>
           <pathelement path="${build.jacoco.instr}"/>
           <pathelement path="${build.evosuite}"/>
           <path refid="source.lib" />
           <path refid="test.lib" />
           <path refid="evosuite.lib" />
           <path refid="jacoco.lib" />
        </classpath>
        <batchtest fork="yes">
           <fileset dir="${evosuite.java}">
             <exclude name="**/*scaffolding.java"/>
             <include name="**/*.java"/>
           </fileset>
        </batchtest>
     </junit>
  </target> 

  <target name="evosuite-coverage" depends="evosuite-measure-coverage">
      <jacoco:report>
          <executiondata>
              <file file="${jacoco.exec.file}"/>
          </executiondata>
          <structure name="${ant.project.name} coverage report">
              <classfiles>
                  <fileset dir="${build.classes}"/>
              </classfiles>
              <sourcefiles>
                  <fileset dir="${source.java}"/>
              </sourcefiles>
          </structure>
          <html destdir="${jacoco.report.dir}"/>
          <csv destfile="${jacoco.report.dir}/report.csv"/>
          <xml destfile="${jacoco.report.dir}/report.xml"/>
      </jacoco:report>
  </target>

  <target name="pit-evosuite" depends="compile-evosuite">
      <path id="mutation.path">
          <path refid="pitest.lib"/>
          <path refid="evosuite.lib"/>
          <pathelement path="${build.classes}"/>
          <pathelement path="${build.evosuite}"/>
      </path>
      <pitest pitClasspath="pitest.lib" threads="${pitest.threads}" classPath="mutation.path" targetTests="*_ESTest" targetClasses="${pitest.classes}" reportDir="${build.home}/pitReports" sourceDir="${source.java}" jvmArgs="-Xmx${max.heap}" excludedClasses="${ant.project.name}.*ESTest*" outputFormats="CSV,HTML" timestampedReports="false" />
  </target>      

<!-- ====================================================================== -->
  
  <target name="compile-randoop" depends="compile"
          description="Compile Randoop generated tests">
    <mkdir dir="${build.randoop}"/>
    <javac  srcdir="${randoop.java}"
           destdir="${build.randoop}"
            source="${compile.source}"
            target="${compile.target}"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}"
              fork="true"
       memoryMaximumSize="${max.heap}"
       includeantruntime="false">
          <classpath>
            <path refid="source.lib" />
            <path refid="test.lib" />
            <pathelement path="${build.classes}"/>
          </classpath>
    </javac>
  </target>

  <target name="randoop-test" depends="compile-randoop"
          description="Run Randoop generated tests">
     <junit printsummary="yes" haltonfailure="no" fork="yes"
          showoutput="yes">
        <formatter type="brief" usefile="true" />
        <classpath>
           <pathelement path="${build.classes}"/>
           <pathelement path="${build.randoop}"/>
           <path refid="source.lib" />
           <path refid="test.lib" />
        </classpath>
        <batchtest fork="yes" todir="${test.report.dir}">
           <fileset dir="${randoop.java}">
             <include name="**/RegressionTest.java"/>
           </fileset>
        </batchtest>
     </junit>
  </target> 

  <target name="randoop-measure-coverage" depends="compile,jacoco-instrument,compile-randoop"
      description="Run Randoop generated tests and measure coverage">
  <junit printsummary="yes" haltonfailure="no" fork="yes"
      showoutput="yes">
  <formatter type="brief" usefile="false" />
  <sysproperty key="jacoco-agent.destfile" file="${jacoco.exec.file}"/>
  <classpath>
      <pathelement path="${build.jacoco.instr}"/>
      <pathelement path="${build.randoop}"/>
      <path refid="source.lib" />
      <path refid="test.lib" />
      <path refid="jacoco.lib" />
  </classpath>
  <batchtest fork="yes">
      <fileset dir="${randoop.java}">
          <include name="**/RegressionTest.java"/>
      </fileset>
  </batchtest>
     </junit>
 </target> 

 <target name="randoop-coverage" depends="randoop-measure-coverage">
     <jacoco:report>
         <executiondata>
             <file file="${jacoco.exec.file}"/>
         </executiondata>
         <structure name="${ant.project.name} coverage report">
             <classfiles>
                 <fileset dir="${build.classes}"/>
             </classfiles>
             <sourcefiles>
                 <fileset dir="${source.java}"/>
             </sourcefiles>
         </structure>
         <html destdir="${jacoco.report.dir}"/>
         <csv destfile="${jacoco.report.dir}/report.csv"/>
         <xml destfile="${jacoco.report.dir}/report.xml"/>
     </jacoco:report>
 </target>

 <target name="pit-randoop" depends="compile-randoop">
     <path id="mutation.path">
         <path refid="pitest.lib"/>
         <pathelement path="${build.classes}"/>
         <pathelement path="${build.randoop}"/>
     </path>
     <pitest pitClasspath="pitest.lib" threads="${pitest.threads}" classPath="mutation.path" targetTests="${ant.project.name}.RegressionTest" targetClasses="${pitest.classes}" reportDir="${build.home}/pitReports" sourceDir="${source.java}" jvmArgs="-Xmx${max.heap}" excludedClasses="${ant.project.name}.RegressionTest*" outputFormats="CSV,HTML" timestampedReports="false"/>
 </target>


<!-- ====================================================================== -->
  
  <target name="compile-be" depends="compile"
          description="Compile BE generated tests">
    <mkdir dir="${build.be}"/>
    <javac  srcdir="${be.java}"
           destdir="${build.be}"
            source="${compile.source}"
            target="${compile.target}"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}"
              fork="true"
       memoryMaximumSize="${max.heap}"
       includeantruntime="false">
          <classpath>
            <path refid="source.lib" />
            <path refid="test.lib" />
            <pathelement path="${build.classes}"/>
          </classpath>
    </javac>
  </target>

  <target name="be-test" depends="compile-be"
          description="Run BE generated tests">
     <junit printsummary="yes" haltonfailure="no" fork="yes"
          showoutput="yes">
        <formatter type="brief" usefile="true" />
        <classpath>
           <pathelement path="${build.classes}"/>
           <pathelement path="${build.be}"/>
           <path refid="source.lib" />
           <path refid="test.lib" />
        </classpath>
        <batchtest fork="yes" todir="${test.report.dir}">
           <fileset dir="${be.java}">
             <include name="**/RegressionTest.java"/>
           </fileset>
        </batchtest>
     </junit>
  </target> 

  <target name="be-measure-coverage" depends="compile,jacoco-instrument,compile-be"
          description="Run BE generated tests and measure coverage">
     <junit printsummary="yes" haltonfailure="no" fork="yes"
          showoutput="yes">
        <formatter type="brief" usefile="false" />
        <sysproperty key="jacoco-agent.destfile" file="${jacoco.exec.file}"/>
        <classpath>
           <pathelement path="${build.jacoco.instr}"/>
           <pathelement path="${build.be}"/>
           <path refid="source.lib" />
           <path refid="test.lib" />
           <path refid="jacoco.lib" />
        </classpath>
        <batchtest fork="yes">
           <fileset dir="${be.java}">
             <include name="**/RegressionTest.java"/>
           </fileset>
        </batchtest>
     </junit>
  </target> 

  <target name="be-coverage" depends="be-measure-coverage">
      <jacoco:report>
          <executiondata>
              <file file="${jacoco.exec.file}"/>
          </executiondata>
          <structure name="${ant.project.name} coverage report">
              <classfiles>
                  <fileset dir="${build.classes}"/>
              </classfiles>
              <sourcefiles>
                  <fileset dir="${source.java}"/>
              </sourcefiles>
          </structure>
          <html destdir="${jacoco.report.dir}"/>
          <csv destfile="${jacoco.report.dir}/report.csv"/>
          <xml destfile="${jacoco.report.dir}/report.xml"/>
      </jacoco:report>
  </target>

  <target name="pit-be" depends="compile-be">
      <path id="mutation.path">
          <path refid="pitest.lib"/>
          <pathelement path="${build.classes}"/>
          <pathelement path="${build.be}"/>
      </path>
      <pitest pitClasspath="pitest.lib" threads="${pitest.threads}" classPath="mutation.path" targetTests="${ant.project.name}.RegressionTest" targetClasses="${pitest.classes}" reportDir="${build.home}/pitReports" sourceDir="${source.java}" jvmArgs="-Xmx${max.heap}" excludedClasses="${ant.project.name}.RegressionTest*" outputFormats="CSV,HTML" timestampedReports="false"/>
  </target>

	<!-- ====================================================================== -->
	  
	  <target name="compile-beapi" depends="compile"
	          description="Compile BEAPI generated tests">
	    <mkdir dir="${build.beapi}"/>
	    <javac  srcdir="${beapi.java}"
	           destdir="${build.beapi}"
	            source="${compile.source}"
	            target="${compile.target}"
	             debug="${compile.debug}"
	       deprecation="${compile.deprecation}"
	          optimize="${compile.optimize}"
	              fork="true"
	       memoryMaximumSize="${max.heap}"
	       includeantruntime="false">
	          <classpath>
	            <path refid="source.lib" />
	            <path refid="test.lib" />
	            <pathelement path="${build.classes}"/>
	          </classpath>
	    </javac>
	  </target>

	  <target name="beapi-test" depends="compile-beapi"
	          description="Run BE generated tests">
	     <junit printsummary="yes" haltonfailure="no" fork="yes"
	          showoutput="yes">
	        <formatter type="brief" usefile="true" />
	        <classpath>
	           <pathelement path="${build.classes}"/>
	           <pathelement path="${build.beapi}"/>
	           <path refid="source.lib" />
	           <path refid="test.lib" />
	        </classpath>
	        <batchtest fork="yes" todir="${test.report.dir}">
	        	<!-- <fileset dir="${beapi.java}"> -->
	           	<!--    <include name="**/RegressionTest.java"/> -->
	        	<!-- </fileset> -->
	        </batchtest>
	     </junit>
	  </target> 

	  
	  <target name="pit-beapi" depends="compile-beapi">
	      <path id="mutation.path">
	          <path refid="pitest.lib"/>
	          <pathelement path="${build.classes}"/>
	          <pathelement path="${build.baapi}"/>
	      </path>
	      <pitest pitClasspath="pitest.lib" threads="${pitest.threads}" classPath="mutation.path" targetTests="${ant.project.name}.LinkedListTest" targetClasses="${pitest.classes}" reportDir="${build.home}/pitReports" sourceDir="${source.java}" jvmArgs="-Xmx${max.heap}" outputFormats="CSV,HTML" timestampedReports="false"/>
	  </target>

	
</project>


    
